// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FruitablesDAL.Models;

public partial class FRUITABLESContext : DbContext
{
    public FRUITABLESContext()
    {
    }

    public FRUITABLESContext(DbContextOptions<FRUITABLESContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<CardsDetail> CardsDetails { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomersVoucher> CustomersVouchers { get; set; }

    public virtual DbSet<FeedBack> FeedBacks { get; set; }

    public virtual DbSet<Item> Items { get; set; }

    public virtual DbSet<Message> Messages { get; set; }

    public virtual DbSet<Offer> Offers { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<PaymentsDetail> PaymentsDetails { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<Seller> Sellers { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=localhost;Initial Catalog=FRUITABLES;Integrated Security=True;Encrypt=False");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__Admins__1788CC4C56A09165");

            entity.Property(e => e.AdminId)
                .ValueGeneratedNever()
                .HasColumnName("adminID");
            entity.Property(e => e.AuthorityLevelId).HasColumnName("authorityLevelID");

            entity.HasOne(d => d.AdminNavigation).WithOne(p => p.Admin)
                .HasForeignKey<Admin>(d => d.AdminId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Admins_Users");
        });

        modelBuilder.Entity<CardsDetail>(entity =>
        {
            entity.HasKey(e => e.CardDetailId).HasName("PK__CardsDet__A0C6DEED14CA0CF2");

            entity.Property(e => e.CardDetailId).HasColumnName("cardDetailID");
            entity.Property(e => e.CardName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("cardName");
            entity.Property(e => e.CardNumber)
                .IsRequired()
                .HasMaxLength(16)
                .HasColumnName("cardNumber");
            entity.Property(e => e.CustomerId).HasColumnName("customerID");
            entity.Property(e => e.Cvv).HasColumnName("cvv");
            entity.Property(e => e.IsActive).HasColumnName("isActive");

            entity.HasOne(d => d.Customer).WithMany(p => p.CardsDetails)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CardsDetails_Customers");
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasKey(e => e.CategoryId).HasName("PK__Categori__23CAF1D8176FC47D");

            entity.Property(e => e.CategoryId).HasColumnName("categoryID");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.ParentCategoryId).HasColumnName("parentCategoryID");

            entity.HasOne(d => d.ParentCategory).WithMany(p => p.InverseParentCategory)
                .HasForeignKey(d => d.ParentCategoryId)
                .HasConstraintName("FK_Categories_Categories");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.CustomerId).HasName("PK__Customer__CB9A1CFF9C6498F5");

            entity.Property(e => e.CustomerId)
                .ValueGeneratedNever()
                .HasColumnName("customerID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("address");

            entity.HasOne(d => d.CustomerNavigation).WithOne(p => p.Customer)
                .HasForeignKey<Customer>(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Customers_Users");
        });

        modelBuilder.Entity<CustomersVoucher>(entity =>
        {
            entity.HasKey(e => new { e.CustomerId, e.VoucherId }).HasName("PK__Customer__3942F3E33AD0C851");

            entity.Property(e => e.CustomerId).HasColumnName("customerID");
            entity.Property(e => e.VoucherId).HasColumnName("voucherID");
            entity.Property(e => e.IsUsed).HasColumnName("isUsed");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomersVouchers)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomersVouchers_Customers");

            entity.HasOne(d => d.Voucher).WithMany(p => p.CustomersVouchers)
                .HasForeignKey(d => d.VoucherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CustomersVouchers_Vouchers");
        });

        modelBuilder.Entity<FeedBack>(entity =>
        {
            entity.HasKey(e => e.FeedbackId).HasName("PK__FeedBack__2613FD2466EB5584");

            entity.Property(e => e.FeedbackId).HasColumnName("feedbackID");
            entity.Property(e => e.CustomerId).HasColumnName("customerID");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.ProductId).HasColumnName("productID");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(2, 1)")
                .HasColumnName("rate");
            entity.Property(e => e.Review)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("review");

            entity.HasOne(d => d.Customer).WithMany(p => p.FeedBacks)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FeedBacks_Customers");

            entity.HasOne(d => d.Product).WithMany(p => p.FeedBacks)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_FeedBacks_Products");
        });

        modelBuilder.Entity<Item>(entity =>
        {
            entity.HasKey(e => e.ItemId).HasName("PK__Item__56A128AA56D03533");

            entity.Property(e => e.ItemId).HasColumnName("itemID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.Discount)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("discount");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.MomentPrice)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("momentPrice");
            entity.Property(e => e.OrderId).HasColumnName("orderID");
            entity.Property(e => e.ProductId).HasColumnName("productID");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.SubTotalPrice)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("subTotalPrice");

            entity.HasOne(d => d.Order).WithMany(p => p.Items)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Items_Orders");

            entity.HasOne(d => d.Product).WithMany(p => p.Items)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Items_Products");
        });

        modelBuilder.Entity<Message>(entity =>
        {
            entity.HasKey(e => e.MessageId).HasName("PK__Messages__4808B9938EFEF697");

            entity.Property(e => e.MessageId).HasColumnName("messageID");
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("content");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("title");
            entity.Property(e => e.UserId).HasColumnName("userID");

            entity.HasOne(d => d.User).WithMany(p => p.Messages)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Messages_Users");
        });

        modelBuilder.Entity<Offer>(entity =>
        {
            entity.HasKey(e => e.OfferId).HasName("PK__Offers__589DEA0033F83D24");

            entity.Property(e => e.OfferId).HasColumnName("offerID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Discount)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("discount");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expireDate");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasKey(e => e.OrderId).HasName("PK__Orders__3213E83F338B384E");

            entity.Property(e => e.OrderId).HasColumnName("orderID");
            entity.Property(e => e.CustomerId).HasColumnName("customerID");
            entity.Property(e => e.CustomerNote)
                .HasMaxLength(255)
                .HasColumnName("customerNote");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.OrderName)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("orderName");
            entity.Property(e => e.ShippingAddress)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("shippingAddress");
            entity.Property(e => e.ShippingFees)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("shippingFees");
            entity.Property(e => e.ShippingState).HasColumnName("shippingState");
            entity.Property(e => e.State).HasColumnName("state");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("totalPrice");
            entity.Property(e => e.Voucher)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("voucher");

            entity.HasOne(d => d.Customer).WithMany(p => p.Orders)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Orders_Customers");
        });

        modelBuilder.Entity<PaymentsDetail>(entity =>
        {
            entity.HasKey(e => e.PaymentDetailId).HasName("PK__Payments__A04B619A1BFEE46D");

            entity.Property(e => e.PaymentDetailId).HasColumnName("paymentDetailID");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("amount");
            entity.Property(e => e.CardId).HasColumnName("cardID");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("date");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.OrderId).HasColumnName("orderID");
            entity.Property(e => e.PaymentMethod)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("paymentMethod");

            entity.HasOne(d => d.Card).WithMany(p => p.PaymentsDetails)
                .HasForeignKey(d => d.CardId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentsDetails_CardsDetails");

            entity.HasOne(d => d.Order).WithMany(p => p.PaymentsDetails)
                .HasForeignKey(d => d.OrderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PaymentsDetails_Orders");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PK__Products__2D10D16AA9D5C8A0");

            entity.Property(e => e.ProductId).HasColumnName("productID");
            entity.Property(e => e.CategoryId).HasColumnName("categoryID");
            entity.Property(e => e.CostPrice)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("costPrice");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.Image)
                .HasMaxLength(50)
                .HasColumnName("image");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("name");
            entity.Property(e => e.Price)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("price");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(2, 1)")
                .HasColumnName("rate");
            entity.Property(e => e.SellerId).HasColumnName("sellerID");
            entity.Property(e => e.Stock).HasColumnName("stock");

            entity.HasOne(d => d.Category).WithMany(p => p.Products)
                .HasForeignKey(d => d.CategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Categories");

            entity.HasOne(d => d.Seller).WithMany(p => p.Products)
                .HasForeignKey(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Products_Sellers");

            entity.HasMany(d => d.Offers).WithMany(p => p.Products)
                .UsingEntity<Dictionary<string, object>>(
                    "ProductsOffer",
                    r => r.HasOne<Offer>().WithMany()
                        .HasForeignKey("OfferId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductsOffers_Offers"),
                    l => l.HasOne<Product>().WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_ProductsOffers_Products"),
                    j =>
                    {
                        j.HasKey("ProductId", "OfferId").HasName("PK__Products__38990FCA3BF7A6BA");
                        j.ToTable("ProductsOffers");
                        j.IndexerProperty<int>("ProductId").HasColumnName("productID");
                        j.IndexerProperty<int>("OfferId").HasColumnName("offerID");
                    });
        });

        modelBuilder.Entity<Seller>(entity =>
        {
            entity.HasKey(e => e.SellerId).HasName("PK__Sellers__1788CCAC86F4CA3F");

            entity.Property(e => e.SellerId)
                .ValueGeneratedNever()
                .HasColumnName("sellerID");
            entity.Property(e => e.Address)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("address");
            entity.Property(e => e.CommercialName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("commercialName");
            entity.Property(e => e.Logo)
                .HasMaxLength(50)
                .HasColumnName("logo");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(2, 1)")
                .HasColumnName("rate");

            entity.HasOne(d => d.SellerNavigation).WithOne(p => p.Seller)
                .HasForeignKey<Seller>(d => d.SellerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Sellers_Users");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Users__1788CC4C9EDF157C");

            entity.Property(e => e.UserId).HasColumnName("userID");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("firstName");
            entity.Property(e => e.IsActive).HasColumnName("isActive");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("lastName");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("password");
            entity.Property(e => e.PhoneNumber)
                .IsRequired()
                .HasMaxLength(11)
                .HasColumnName("phoneNumber");
            entity.Property(e => e.UserName)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("userName");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.VoucherId).HasName("PK__Vouchers__F53389E90B073F3A");

            entity.Property(e => e.VoucherId).HasColumnName("voucherID");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(5, 1)")
                .HasColumnName("amount");
            entity.Property(e => e.CustomerId).HasColumnName("customerID");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(255)
                .HasColumnName("description");
            entity.Property(e => e.ExpireDate)
                .HasColumnType("datetime")
                .HasColumnName("expireDate");
            entity.Property(e => e.IsActive).HasColumnName("isActive");

            entity.HasOne(d => d.Customer).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Vouchers_Customers");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}